"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}function emacsDateConverter(e){var t=e[0],s=e[1];return moment.unix(t*Math.pow(2,16)+s).toString()}function isNaN(e){return"number"==typeof e&&e!=+e}function processNode(e){return"list"===e.type?e.content.map(processNode):{type:e.type,content:e.content}}function findTimestamps(e,t){if("list"===t.type){var s=t.content.filter(function(e){return"t"!==e.content}),r=4===s.length&&s.reduce(function(e,t){return e&&!isNaN(parseInt(t.content,0))},!0);return r?e.concat([s.map(function(e){return parseInt(e.content,0)})]):e.concat(s.reduce(findTimestamps,[]))}return e}function processData(e){var t=e.toString(),s=t.slice(t.indexOf("\n")+1),r=sexprPlus.parse(s),n=(r.map(processNode),r.reduce(findTimestamps,[]));console.dir(n.map(emacsDateConverter))}function processFile(e,t){if(e)throw e;processData(t,options)}var fs=require("fs"),sexprPlus=require("sexpr-plus"),moment=require("moment"),yargs=_interopDefault(require("yargs")),args=yargs.usage("Usage: $0 <filename> [options]").example("$0 test.undo -e emacs -f unix -o myTimes.json",'Read timestamps the emacs-formatted persistent undo file "test.undo" and output a json array of timestamps to myTimes.json').options({e:{alias:"editor",demand:!1,default:"emacs",choices:["emacs","vim"],describe:"The editor type to parse",type:"string"}}).options({f:{alias:"format",demand:!1,default:"unix",describe:"The datetime format (as specified by moment.js)",type:"string"}}).options({o:{alias:"output",demand:!1,default:"process.stdout",describe:"The output file",type:"string"}}).alias("h","help").help("help").argv,options={editor:args.editor,format:args.format,output:args.output};try{fs.readFile(args._[0],processFile)}catch(e){throw e}